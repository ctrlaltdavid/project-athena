<!
//  VelocityWrite.slh
//  libraries/render-utils/src
//
//  Created by Olivier Prat on 10/19/18.
//  Copyright 2018 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
!>
<@if not VELOCITY_WRITE_SLH@>
<@def VELOCITY_WRITE_SLH@>

<@include gpu/Transform.slh@>
<$declareStandardCameraTransform()$>

vec2 getEyeTexcoordPos() {
    // No need to add 0.5 as, by default, frag coords are pixel centered at (0.5, 0.5)
    vec2 texCoordPos = gl_FragCoord.xy;
    texCoordPos *= cam_getInvWidthHeight();
    texCoordPos.x -= cam_getStereoSide();
    return texCoordPos;
}

vec2 packVelocity(vec4 prevPositionCS) {
    vec2 uv = getEyeTexcoordPos();
    vec2 prevUV =  (prevPositionCS.xy / prevPositionCS.w) * 0.5 + 0.5;
    vec2 deltaUV = uv - prevUV;
    // Velocity should be computed without any jitter inside.
    return deltaUV;
}

vec2 packVelocity(vec4 positionCS, vec4 prevPositionCS) {
    vec2 uv = positionCS.xy / positionCS.w;
    vec2 prevUV =  prevPositionCS.xy / prevPositionCS.w;
    vec2 deltaUV = (uv - prevUV) * 0.5;
    // Velocity should be computed without any jitter inside.
    return deltaUV;
}

void packDeferredFragmentSky(vec4 prevPositionCS, vec3 color) {
    _velocity = vec4(packVelocity(prevPositionCS), 0.0, 0.0);
    _lighting = vec4(color, 1.0);
}

void packDeferredFragmentLighting(vec4 prevPositionCS, vec4 color) {
    _velocity = vec4(packVelocity(prevPositionCS), 0.0, 0.0);
    _lighting = color;
}

// Use this version when your shader can possibly be used to rasterize GL_LINES
void packDeferredFragmentLighting(vec4 positionCS, vec4 prevPositionCS, vec4 color) {
    _velocity = vec4(packVelocity(positionCS, prevPositionCS), 0.0, 0.0);
    _lighting = color;
}

<@endif@>